name: Build

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# ZETTLR GITHUB ACTIONS WORKFLOW FILE                                         #
#                                                                             #
# This file contains the logic necessary to build a full release from source. #
#                                                                             #
# Whenever someone creates a new git tag on the master branch, this workflow  #
# will be triggered, building the corresponding release for all platforms.    #
# This entails running three workers, one on Ubuntu, one on macos, and one on #
# Windows, in order to build the application. Each build worker clones the    #
# repository, installs the dependencies, then runs the actual build, before   #
# uploading the resulting artifact(s) to the worker's temporary space. After  #
# all three builds have been successfully completed, the last job worker will #
# start, download all created assets, generate the SHA256 checksums for them, #
# verify the sums, create a new release draft with the corresponding tag, and #
# finally upload all generated assets to the release draft.                   #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Whenever a tag is being created on the master branch, trigger this build.
on:
  push:
    branches:
      - master
    tags:
      # Build on every tag in the form v1.2.3-something.4
      - 'v*'

# Defaults for every job and step in this workflow
defaults:
  run:
    shell: bash # Run everything using bash

# This workflow file contains four jobs, three to build the corresponding
# releases on all three supported platforms, and a last one, which will
# create the release draft.
jobs:
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                              WINDOWS BUILDS                               #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_win:
    name: Windows build
    runs-on: windows-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Setup NodeJS 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Set up build environment
        run: yarn install --frozen-lockfile
      - name: Build the reveal.js templates
        run: yarn reveal:build
      - name: Build Windows NSIS installer (x32 and x64)
        # Make sure to sign the windows installer using the corresponding SSL EV.
        run: yarn release:win
        env:
          CSC_LINK: ${{ secrets.WIN_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS }}
      - name: Cache artifact (x32 and x64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}.exe
          path: ./release/Zettlr-${{steps.ref.outputs.version}}.exe
      - name: Build Windows NSIS installer (arm64)
        # Make sure to sign the windows installer using the corresponding SSL EV.
        run: yarn release:win-arm
        env:
          CSC_LINK: ${{ secrets.WIN_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS }}
      - name: Rename arm64 artifact
        # We need to rename the artifact prior to uploading so that it does not
        # overwrite the first release artifact for 32 and 64 bit desktop architectures
        run: mv ./release/Zettlr-${{steps.ref.outputs.version}}.exe ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.exe
      - name: Cache artifact (arm64)
        uses: actions/upload-artifact@v1
        with:
          # It is important to understand that "name" does NOT refer to the
          # uploaded file's name, but it's rather an ID, so the file needs to
          # be renamed prior to uploading (see step above).
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.exe
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.exe

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                               MACOS BUILDS                                #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_macos:
    name: macOS build
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Setup NodeJS 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Set up build environment
        run: yarn install --frozen-lockfile
      - name: Build the reveal.js templates
        run: yarn reveal:build
      # Save the macOS certificate on this runner for forge to access it in the
      # next step below.
      - name: Retrieve code signing certificate
        run: ./scripts/add-osx-cert.sh
        env:
          MACOS_CERT: ${{ secrets.MACOS_CERT }}
          MACOS_CERT_PASS: ${{ secrets.MACOS_CERT_PASS }}
      # This step also signs and notarizes the app. NOTE that forge does this,
      # as we shall not notarize and/or sign the resulting DMG file as well!
      - name: Build macOS DMG file
        run: yarn release:mac
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
      - name: Cache macOS release
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}.dmg
          path: ./release/Zettlr-${{steps.ref.outputs.version}}.dmg

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                               LINUX BUILDS                                #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_linux:
    name: Linux build
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Setup NodeJS 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Set up build environment
        run: yarn install --frozen-lockfile
      - name: Build the reveal.js templates
        run: yarn reveal:build
      - name: Build Linux targets
        run: yarn release:linux
      - name: Cache .deb release
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-amd64.deb
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-amd64.deb
      - name: Cache .rpm release
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
      - name: Cache AppImage (x32) release
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-i386.AppImage
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-i386.AppImage
      - name: Cache AppImage (x64) release
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage

  # after the three builds, this job downloads all assets, creates and verifies
  # SHA256 checksums, and finally creates a release draft and uploads all
  # assets to it.
  prepare_release:
    name: Prepare release draft
    # Make sure (and wait until) the builds have succeeded
    needs: [build_win, build_macos, build_linux]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Setup NodeJS 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      # First, download all resulting assets from the previous steps.
      - name: Download NSIS installer
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}.exe
          path: .
      - name: Download NSIS-installer (arm64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.exe
          path: .
      - name: Download macOS image
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}.dmg
          path: .
      - name: Download .deb-installer
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-amd64.deb
          path: .
      - name: Download .rpm-installer
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
          path: .
      - name: Download AppImage binary (x32)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-i386.AppImage
          path: .
      - name: Download AppImage binary (x64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage
          path: .
      # Now we are set, we have all five release assets on the VM. It's time to create the
      # SHA-checksums file and then upload everything!
      - name: Generate SHA256 checksums
        run: |
          sha256sum "Zettlr-${{steps.ref.outputs.version}}.exe" > "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-arm64.exe" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}.dmg" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-amd64.deb" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-i386.AppImage" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage" >> "SHA256SUMS.txt"
      - name: Verify checksums
        run: sha256sum -c SHA256SUMS.txt
      # Create a new release draft
      - name: Create a new release draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{steps.ref.outputs.version}} # tag_name is required, but can be overridden during edit
          release_name: Release v${{steps.ref.outputs.version}} # release_name is required
          body: If you can read this, we have forgotten to fill in the changelog. Sorry!
          draft: true # Always create as draft, so that we can populate the remaining values easily

      # And finally, upload that shit
      - name: Upload NSIS installer
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Zettlr-${{steps.ref.outputs.version}}.exe
          asset_name: Zettlr-${{steps.ref.outputs.version}}.exe
          asset_content_type: application/x-msdownload
      - name: Upload NSIS installer (arm64)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Zettlr-${{steps.ref.outputs.version}}-arm64.exe
          asset_name: Zettlr-${{steps.ref.outputs.version}}-arm64.exe
          asset_content_type: application/x-msdownload
      - name: Upload macOS image
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Zettlr-${{steps.ref.outputs.version}}.dmg
          asset_name: Zettlr-${{steps.ref.outputs.version}}.dmg
          asset_content_type: application/octet-stream
      - name: Upload .deb installer
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Zettlr-${{steps.ref.outputs.version}}-amd64.deb
          asset_name: Zettlr-${{steps.ref.outputs.version}}-amd64.deb
          asset_content_type: application/octet-stream
      - name: Upload .rpm installer
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
          asset_name: Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
          asset_content_type: application/octet-stream
      - name: Upload AppImage binary (x32)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Zettlr-${{steps.ref.outputs.version}}-i386.AppImage
          asset_name: Zettlr-${{steps.ref.outputs.version}}-i386.AppImage
          asset_content_type: application/octet-stream
      - name: Upload AppImage binary (x64)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage
          asset_name: Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage
          asset_content_type: application/octet-stream
      - name: Upload the checksums
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS.txt
          asset_name: SHA256SUMS.txt
          asset_content_type: text/plain
